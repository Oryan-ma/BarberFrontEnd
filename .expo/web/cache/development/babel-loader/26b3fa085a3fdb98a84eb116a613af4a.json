{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFonts = useFonts;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Font = require(\"./Font\");\n\nfunction useFonts(map) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    (0, _Font.loadAsync)(map).then(function () {\n      return setLoaded(true);\n    }).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAaM,SAAU,QAAV,CACJ,GADI,EAC8C;AAAA,kBAEtB,qBAAS,KAAT,CAFsB;AAAA;AAAA,MAE3C,MAF2C;AAAA,MAEnC,SAFmC;;AAAA,mBAGxB,qBAAuB,IAAvB,CAHwB;AAAA;AAAA,MAG3C,KAH2C;AAAA,MAGpC,QAHoC;;AAKlD,wBAAU,YAAK;AACb,yBAAU,GAAV,EACG,IADH,CACQ;AAAA,aAAM,SAAS,CAAC,IAAD,CAAf;AAAA,KADR,EAEG,KAFH,CAES,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(\n  map: string | { [fontFamily: string]: FontSource }\n): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}