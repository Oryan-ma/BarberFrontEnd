{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.isOrientationLandscape = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\n\nexports.isOrientationLandscape = isOrientationLandscape;\n\nfunction _default(WrappedComponent) {\n  var withOrientation = function (_React$Component) {\n    (0, _inherits2.default)(withOrientation, _React$Component);\n\n    var _super = _createSuper(withOrientation);\n\n    function withOrientation() {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, withOrientation);\n      _this = _super.call(this);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleOrientationChange\", function (_ref2) {\n        var window = _ref2.window;\n        var isLandscape = isOrientationLandscape(window);\n\n        _this.setState({\n          isLandscape: isLandscape\n        });\n      });\n\n      var _isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));\n\n      _this.state = {\n        isLandscape: _isLandscape\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(withOrientation, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, _extends({}, this.props, this.state));\n      }\n    }]);\n    return withOrientation;\n  }(React.Component);\n\n  return (0, _hoistNonReactStatics.default)(withOrientation, WrappedComponent);\n}","map":{"version":3,"sources":["withOrientation.js"],"names":["isOrientationLandscape","height","width","React","constructor","isLandscape","Dimensions","componentDidMount","componentWillUnmount","window","render","hoistNonReactStatic"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,SAAuBC,KAAK,GAA3D,MAA+B;AAAA,CAA/B;;;;AAEQ,kBAAA,gBAAA,EAA4B;AAAA,MACzC,eADyC;AAAA;;AAAA;;AAEvCE,+BAAc;AAAA;;AAAA;AACZ;;AADY,MAAA,eAAA,8CAAA,yBAAA,EAeY,iBAAgB;AAAA,YAAbK,MAAa,SAAbA,MAAa;AACxC,YAAMJ,WAAW,GAAGL,sBAAsB,CAA1C,MAA0C,CAA1C;;AACA,cAAA,QAAA,CAAc;AAAEK,UAAAA,WAAAA,EAAAA;AAAF,SAAd;AAjBY,OAAA,CAAA;;AAGZ,UAAMA,YAAW,GAAGL,sBAAsB,CAACM,wBAAAA,GAAAA,CAA3C,QAA2CA,CAAD,CAA1C;;AACA,YAAA,KAAA,GAAa;AAAED,QAAAA,WAAW,EAAXA;AAAF,OAAb;AAJY;AAKb;;AAPsC;AAAA;AAAA,aASvCE,6BAAoB;AAClBD,gCAAAA,gBAAAA,CAAAA,QAAAA,EAAsC,KAAtCA,uBAAAA;AACD;AAXsC;AAAA;AAAA,aAavCE,gCAAuB;AACrBF,gCAAAA,mBAAAA,CAAAA,QAAAA,EAAyC,KAAzCA,uBAAAA;AACD;AAfsC;AAAA;AAAA,aAsBvCI,kBAAS;AACP,eAAO,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAsB,KAAtB,KAAA,EAAsC,KAA7C,KAAO,CAAA,CAAP;AACD;AAxBsC;AAAA;AAAA,IACXP,KAAK,CAAnC,SADyC;;AA2BzC,SAAOQ,mCAAmB,eAAnBA,EAAP,gBAAOA,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"script"}