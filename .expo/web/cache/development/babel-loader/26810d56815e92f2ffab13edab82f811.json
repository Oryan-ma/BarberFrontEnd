{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _invariant = _interopRequireDefault(require(\"../utils/invariant\"));\n\nvar _getScreenForRouteName = _interopRequireDefault(require(\"./getScreenForRouteName\"));\n\nvar _validateScreenOptions = _interopRequireDefault(require(\"./validateScreenOptions\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer(_objectSpread(_objectSpread({}, configProps), {}, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer);\n  }\n\n  return navigationOptions;\n}\n\nvar _default = function _default(routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps, theme) {\n    var state = navigation.state;\n    var route = state;\n    (0, _invariant.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = (0, _getScreenForRouteName.default)(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {},\n      theme: theme\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    (0, _validateScreenOptions.default)(outputConfig, route);\n    return outputConfig;\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","navigation","screenProps","theme","outputConfig","applyConfig","validateScreenOptions"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,2CAAO,iBAAP,GAEKA,UAAU,iCAAC,WAAD;AAEXC,MAAAA,iBAAAA,EAAAA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,2CAAO,iBAAP,GAEKD,UAFL;AAID;;AACD,SAAA,iBAAA;AACD;;eAEc,kBAAA,YAAA,EAAA,qBAAA;AAAA,SAAyC,UAAA,UAAA,EAAA,WAAA,EAAA,KAAA,EAInD;AAAA,QACKE,KADL,GACH,UADG,CACKA,KADL;AAEH,QAAMC,KAAK,GAAX,KAAA;AAEAC,4BACED,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADZ,QAATC,EAAAA,gEAAAA;AAKA,QAAMC,SAAS,GAAGC,oCAAqB,YAArBA,EAAoCH,KAAK,CAA3D,SAAkBG,CAAlB;AAEA,QAAMC,WAAW,GAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC;AAEA,QAAMM,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;AAEA,QAAMG,qBAAqB,GAAGL,SAAS,CAAvC,iBAAA;AAEA,QAAMM,aAAa,GAAG;AAAEC,MAAAA,UAAF,EAAEA,UAAF;AAAcC,MAAAA,WAAW,EAAEA,WAAW,IAAtC,EAAA;AAA8CC,MAAAA,KAAAA,EAAAA;AAA9C,KAAtB;AAEA,QAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;AACAD,IAAAA,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAKAA,IAAAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAEAE,wCAAqB,YAArBA,EAAAA,KAAAA;AAEA,WAAA,YAAA;AAjCF,GAAe;AAAA,C","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"script"}