{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"AppOwnership\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.AppOwnership;\n  }\n});\nObject.defineProperty(exports, \"ExecutionEnvironment\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.ExecutionEnvironment;\n  }\n});\nObject.defineProperty(exports, \"UserInterfaceIdiom\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.UserInterfaceIdiom;\n  }\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _Constants = require(\"./Constants.types\");\n\nvar _ExponentConstants = _interopRequireDefault(require(\"./ExponentConstants\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nif (!_ExponentConstants.default) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar manifest = null;\n\nif (_core.NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (_core.NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = _core.NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (_core.NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(_core.NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\nif (!manifest && _ExponentConstants.default && _ExponentConstants.default.manifest) {\n  manifest = _ExponentConstants.default.manifest;\n\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nvar _ref = _ExponentConstants.default || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = (0, _objectWithoutProperties2.default)(_ref, [\"name\", \"appOwnership\"]);\n\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri\n});\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get: function get() {\n      if (!manifest) {\n        var invalidManifestType = manifest === null ? 'null' : 'undefined';\n\n        if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && _reactNative.Platform.OS !== 'web') {\n          console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n        } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {\n          throw new _core.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n        }\n      }\n\n      return manifest;\n    },\n    set: function set(value) {\n      manifest = value;\n    }\n  }\n});\nvar _default = constants;\nexports.default = _default;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAWA;;;;;;AAcA,IAAI,CAAC,0BAAL,EAAwB;AACtB,EAAA,OAAO,CAAC,IAAR,CACE,wGADF;AAGD;;AAED,IAAI,QAAQ,GAAG,IAAf;;AAEA,IAAI,yBAAmB,WAAvB,EAAoC;AAClC,MAAI,eAAJ;;AACA,MAAI,yBAAmB,WAAnB,CAA+B,QAAnC,EAA6C;AAC3C,IAAA,eAAe,GAAG,yBAAmB,WAAnB,CAA+B,QAAjD;AACD,GAFD,MAEO,IAAI,yBAAmB,WAAnB,CAA+B,cAAnC,EAAmD;AACxD,IAAA,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,yBAAmB,WAAnB,CAA+B,cAA1C,CAAlB;AACD;;AACD,MAAI,eAAe,IAAI,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,GAAsC,CAA7D,EAAgE;AAC9D,IAAA,QAAQ,GAAG,eAAX;AACD;AACF;;AAGD,IAAI,CAAC,QAAD,IAAa,0BAAb,IAAkC,2BAAkB,QAAxD,EAAkE;AAChE,EAAA,QAAQ,GAAG,2BAAkB,QAA7B;;AAEA,MAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,IAAA,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAX;AACD;AACF;;WAEmD,8BAAqB,E;IAAjE,I,QAAA,I;IAAM,Y,QAAA,Y;IAAiB,e;;AAE/B,IAAM,SAAS,mCACV,eADU;AAGb,EAAA,YAAY,EAAE,YAAF,WAAE,YAAF,GAAkB,IAHjB;AAKb,EAAA,QAAQ,EAAE,eAAe,CAAC,cALb;AAMb,EAAA,UAAU,EAAE,eAAe,CAAC;AANf,EAAf;;AASA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC;AACjC,EAAA,QAAQ,EAAE;AACR,IAAA,UAAU,EAAE,IADJ;AAER,IAAA,GAFQ,iBAEL;AACD,UAAI,CAAC,QAAL,EAAe;AACb,YAAM,mBAAmB,GAAG,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,WAAzD;;AACA,YACE,eAAe,CAAC,oBAAhB,KAAyC,gCAAqB,IAA9D,IACA,sBAAS,EAAT,KAAgB,KAFlB,EAGE;AACA,UAAA,OAAO,CAAC,IAAR,4BAC2B,mBAD3B;AAGD,SAPD,MAOO,IACL,eAAe,CAAC,oBAAhB,KAAyC,gCAAqB,WAA9D,IACA,eAAe,CAAC,oBAAhB,KAAyC,gCAAqB,UAFzD,EAGL;AAGA,gBAAM,IAAI,gBAAJ,CACJ,oCADI,6BAEqB,mBAFrB,0BAAN;AAID;AACF;;AACD,aAAO,QAAP;AACD,KAzBO;AA2BR,IAAA,GA3BQ,eA2BJ,KA3BI,EA2BC;AACP,MAAA,QAAQ,GAAG,KAAX;AACD;AA7BO;AADuB,CAAnC;eAkCe,S","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Legacy aliases\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri,\n};\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      if (!manifest) {\n        const invalidManifestType = manifest === null ? 'null' : 'undefined';\n        if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n          Platform.OS !== 'web'\n        ) {\n          console.warn(\n            `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n          );\n        } else if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n        ) {\n          // If we somehow get here, this is a truly exceptional state to be in.\n          // Constants.manifest should *always* be defined in those contexts.\n          throw new CodedError(\n            'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n            `Constants.manifest is ${invalidManifestType}, must be an object.`\n          );\n        }\n      }\n      return manifest;\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n});\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}