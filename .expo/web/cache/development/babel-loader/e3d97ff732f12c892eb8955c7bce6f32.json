{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _shadow = _interopRequireDefault(require(\"../styles/shadow\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _overlay = _interopRequireDefault(require(\"../styles/overlay\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Surface = function Surface(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"style\", \"theme\"]);\n  var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};\n  var _flattenedStyles$elev = flattenedStyles.elevation,\n      elevation = _flattenedStyles$elev === void 0 ? 4 : _flattenedStyles$elev;\n  var isDarkTheme = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors;\n  return React.createElement(_reactNative.Animated.View, _extends({}, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors.surface) : colors.surface\n    }, elevation && (0, _shadow.default)(elevation), style]\n  }));\n};\n\nvar _default = (0, _theming.withTheme)(Surface);\n\nexports.default = _default;","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","rest","flattenedStyles","StyleSheet","elevation","dark","colors","backgroundColor","isDarkTheme","mode","overlay","surface","shadow","withTheme"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAyDA,IAAMA,OAAO,GAAG,SAAVA,OAAU,OAAsC;AAAA,MAArC,KAAqC,QAArC,KAAqC;AAAA,MAArC,KAAqC,QAArC,KAAqC;AAAA,MAAlBC,IAAkB;AACpD,MAAMC,eAAe,GAAGC,wBAAAA,OAAAA,CAAAA,KAAAA,KAAxB,EAAA;AADoD,8BAEpD,eAFoD,CAE5CC,SAF4C;AAAA,MAE5CA,SAF4C,sCAEhC,CAFgC;AAAA,MAG9C,WAH8C,GAGpD,KAHoD,CAG5CC,IAH4C;AAAA,MAG9C,IAH8C,GAGpD,KAHoD,CAG9C,IAH8C;AAAA,MAGnBC,MAHmB,GAGpD,KAHoD,CAGnBA,MAHmB;AAIpD,SAEE,KAAA,CAAA,aAAA,CAAA,sBAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,eAAe,EACbC,WAAW,IAAIC,IAAI,KAAnBD,UAAAA,GACIE,sBAAO,SAAPA,EAAmBJ,MAAM,CAD7BE,OACIE,CADJF,GAEIF,MAAM,CAACK;AAJf,KADK,EAOLP,SAAS,IAAIQ,qBAPR,SAOQA,CAPR,EAAA,KAAA;AAFT,GAAA,CAAA,CAFF;AAJF,CAAA;;eAsBeC,wBAAf,OAAeA,C","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nconst Surface = ({ style, theme, ...rest }: Props) => {\n  const flattenedStyles = StyleSheet.flatten(style) || {};\n  const { elevation = 4 }: ViewStyle = flattenedStyles;\n  const { dark: isDarkTheme, mode, colors } = theme;\n  return (\n    // @ts-ignore\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors.surface)\n              : colors.surface,\n        },\n        elevation && shadow(elevation),\n        style,\n      ]}\n    />\n  );\n};\n\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"script"}