{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  (0, _inherits2.default)(TextInputOutlined, _React$Component);\n\n  var _super = _createSuper(TextInputOutlined);\n\n  function TextInputOutlined() {\n    (0, _classCallCheck2.default)(this, TextInputOutlined);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"]);\n      var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          textAlign = _ref.textAlign,\n          viewStyle = (0, _objectWithoutProperties2.default)(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\", \"textAlign\"]);\n\n      var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n            type = _ref2.type;\n        return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n      });\n\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);\n      }\n\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n      var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: _reactNative.Platform.OS === 'android',\n        styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = (0, _helpers.calculatePadding)(paddingSettings);\n      var paddingOut = (0, _helpers.adjustPaddingOut)(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: _constants.ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return React.createElement(_reactNative.View, {\n        style: viewStyle\n      }, React.createElement(_reactNative.View, null, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(_reactNative.View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, React.createElement(_InputLabel.default, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: _LabelBackground.default\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n        }), adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n    }\n  }]);\n  return TextInputOutlined;\n}(React.Component);\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(_reactNative.TextInput, props);\n  }\n});\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","disabled","error","multiline","editable","render","props","rest","adornmentConfig","getAdornmentConfig","left","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","inputTextColor","activeColor","color","placeholderColor","outlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","focused","textStyle","visible","labeled","paddingTop","paddingBottom","LabelBackground","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","textAlign","Outline","borderRadius","theme","borderWidth","borderColor","position","paddingHorizontal","outline","top","bottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n      labelTranslationXOffset,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}