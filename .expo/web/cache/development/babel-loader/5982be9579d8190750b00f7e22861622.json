{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\"]);\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var backgroundColor = active ? (0, _color.default)(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? colors.primary : (0, _color.default)(colors.text).alpha(0.68).rgb().string();\n  var font = theme.fonts.medium;\n  var labelMargin = icon ? 32 : 0;\n  return React.createElement(_reactNative.View, _extends({}, rest, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness\n    }, style]\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: {\n      borderRadius: roundness\n    },\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: styles.wrapper\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, _objectSpread(_objectSpread({\n      color: contentColor\n    }, font), {}, {\n      marginLeft: labelMargin\n    })]\n  }, label))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(DrawerItem);\n\nexports.default = _default;","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","rest","roundness","backgroundColor","active","color","colors","contentColor","font","theme","labelMargin","icon","styles","borderRadius","selected","accessibilityLabel","wrapper","marginLeft","container","marginHorizontal","marginVertical","flexDirection","alignItems","padding","label","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View\n      {...rest}\n      style={[\n        styles.container,\n        { backgroundColor, borderRadius: roundness },\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={{ borderRadius: roundness }}\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          {icon ? <Icon source={icon} size={24} color={contentColor} /> : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              {\n                color: contentColor,\n                ...font,\n                marginLeft: labelMargin,\n              },\n            ]}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"script"}