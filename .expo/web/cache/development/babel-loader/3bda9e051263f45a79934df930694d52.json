{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckboxItem = exports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\n\nvar _CheckboxAndroid = _interopRequireDefault(require(\"./CheckboxAndroid\"));\n\nvar _CheckboxIOS = _interopRequireDefault(require(\"./CheckboxIOS\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\"]);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme\n  });\n\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);\n  } else {\n    checkbox = React.createElement(_Checkbox.default, checkboxProps);\n  }\n\n  return React.createElement(_TouchableRipple.default, {\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\"\n  }, React.createElement(_Text.default, {\n    style: [styles.label, {\n      color: theme.colors.text\n    }, labelStyle]\n  }, label), checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nvar _default = (0, _theming.withTheme)(CheckboxItem);\n\nexports.default = _default;\nvar CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);\nexports.CheckboxItem = CheckboxItemWithTheme;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","props","checkboxProps","status","theme","mode","checkbox","testID","styles","color","text","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flex"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAqEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAUR;AAAA,MAVS,KAUT,QAVS,KAUT;AAAA,MAVS,MAUT,QAVS,MAUT;AAAA,MAVS,KAUT,QAVS,KAUT;AAAA,MAVS,OAUT,QAVS,OAUT;AAAA,MAVS,UAUT,QAVS,UAUT;AAAA,MAVS,KAUT,QAVS,KAUT;AAAA,MAVS,MAUT,QAVS,MAUT;AAAA,MAVS,IAUT,QAVS,IAUT;AAAA,MADRC,KACQ;;AACX,MAAMC,aAAa,mCAAG,KAAH;AAAeC,IAAAA,MAAZ,EAAYA,MAAf;AAAuBC,IAAAA,KAAAA,EAAAA;AAAvB,IAAnB;;AACA,MAAA,QAAA;;AAEA,MAAIC,IAAI,KAAR,SAAA,EAAwB;AACtBC,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAXA,aAAW,CAAXA;AADF,GAAA,MAEO,IAAID,IAAI,KAAR,KAAA,EAAoB;AACzBC,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAXA,aAAW,CAAXA;AADK,GAAA,MAEA;AACLA,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAXA,aAAW,CAAXA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAAiB,IAAA,OAAO,EAAxB,OAAA;AAAmC,IAAA,MAAM,EAAEC;AAA3C,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAe;AAAEC,MAAAA,KAAK,EAAEL,KAAK,CAALA,MAAAA,CAAaM;AAAtB,KAAf,EAAA,UAAA;AAAb,GAAA,EADF,KACE,CADF,EAFJ,QAEI,CADF,CADF;AAtBF,CAAA;;AAkCAV,YAAY,CAAZA,WAAAA,GAAAA,eAAAA;;eAEeW,wBAAf,YAAeA,C;;;AAGf,IAAMC,qBAAqB,GAAGD,wBAA9B,YAA8BA,CAA9B;;;AAIA,IAAMH,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,EAAA;AAELC,IAAAA,IAAI,EAAE;AAFD;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}