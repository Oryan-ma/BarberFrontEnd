{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _withNavigation = _interopRequireDefault(require(\"./withNavigation\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nvar NavigationEvents = function (_React$Component) {\n  (0, _inherits2.default)(NavigationEvents, _React$Component);\n\n  var _super = _createSuper(NavigationEvents);\n\n  function NavigationEvents() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, NavigationEvents);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPropListener\", function (eventName) {\n      return _this.props[EventNameToPropName[eventName]];\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(NavigationEvents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribeAll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.navigation !== prevProps.navigation) {\n        this.removeAll();\n        this.subscribeAll();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeAll();\n    }\n  }, {\n    key: \"subscribeAll\",\n    value: function subscribeAll() {\n      var _this2 = this;\n\n      this.subscriptions = {};\n      EventNames.forEach(function (eventName) {\n        _this2.subscriptions[eventName] = _this2.props.navigation.addListener(eventName, function () {\n          var propListener = _this2.getPropListener(eventName);\n\n          return propListener && propListener.apply(void 0, arguments);\n        });\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this3 = this;\n\n      EventNames.forEach(function (eventName) {\n        _this3.subscriptions[eventName].remove();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return NavigationEvents;\n}(React.Component);\n\nvar _default = (0, _withNavigation.default)(NavigationEvents);\n\nexports.default = _default;","map":{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","React","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","eventName","subscribeAll","propListener","removeAll","render","withNavigation"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EADiB,aAAA;AAE1BC,EAAAA,QAAQ,EAFkB,YAAA;AAG1BC,EAAAA,QAAQ,EAHkB,YAAA;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,mBAAmBA,CAAnB;;IAEA,gB;;;;;AAA+C,8BAAA;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,oDAAA,IAAA;;AAAA,IAAA,eAAA,8CAAA,iBAAA,EAmB1BM,UAAAA,SAAD;AAAA,aAAe,MAAA,KAAA,CAAWZ,mBAAmB,CAnBlB,SAmBkB,CAA9B,CAAf;AAAA,KAnB2B,CAAA;;AAAA;AAAA;;;;WAC7CQ,6BAAoB;AAIlB,WAAA,YAAA;AACD;;;WAEDC,4BAAkB,SAAlBA,EAA8B;AAC5B,UAAI,KAAA,KAAA,CAAA,UAAA,KAA0BC,SAAS,CAAvC,UAAA,EAAoD;AAClD,aAAA,SAAA;AACA,aAAA,YAAA;AACD;AACF;;;WAEDC,gCAAuB;AACrB,WAAA,SAAA;AACD;;;WAIDE,wBAAe;AAAA;;AACb,WAAA,aAAA,GAAA,EAAA;AAEAR,MAAAA,UAAU,CAAVA,OAAAA,CAAoBO,UAAAA,SAAD,EAAe;AAChC,QAAA,MAAA,CAAA,aAAA,CAAA,SAAA,IAAgC,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,SAAA,EAE9B,YAAa;AACX,cAAME,YAAY,GAAG,MAAA,CAAA,eAAA,CAArB,SAAqB,CAArB;;AACA,iBAAOA,YAAY,IAAIA,YAAvB,MAAuBA,mBAAvB;AAJJ,SAAgC,CAAhC;AADFT,OAAAA;AASD;;;WAEDU,qBAAY;AAAA;;AACVV,MAAAA,UAAU,CAAVA,OAAAA,CAAoBO,UAAAA,SAAD,EAAe;AAChC,QAAA,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA,MAAA;AADFP,OAAAA;AAGD;;;WAEDW,kBAAS;AACP,aAAA,IAAA;AACD;;;EA3C4BT,KAAK,CAApC,S;;eA8CeU,6BAAf,gBAAeA,C","sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"script"}