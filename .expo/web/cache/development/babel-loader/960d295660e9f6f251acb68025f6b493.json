{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _colors = require(\"../styles/colors\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Divider = function Divider(_ref) {\n  var inset = _ref.inset,\n      style = _ref.style,\n      theme = _ref.theme,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"inset\", \"style\", \"theme\"]);\n  var isDarkTheme = theme.dark;\n  return React.createElement(_reactNative.View, _extends({}, rest, {\n    style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style]\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  light: {\n    backgroundColor: (0, _color.default)(_colors.black).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: (0, _color.default)(_colors.white).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Divider);\n\nexports.default = _default;","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","rest","dark","isDarkTheme","styles","inset","light","backgroundColor","color","height","StyleSheet","hairlineWidth","marginLeft","withTheme"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AA0CA,IAAMA,OAAO,GAAG,SAAVA,OAAU,OAA6C;AAAA,MAA5C,KAA4C,QAA5C,KAA4C;AAAA,MAA5C,KAA4C,QAA5C,KAA4C;AAAA,MAA5C,KAA4C,QAA5C,KAA4C;AAAA,MAAlBC,IAAkB;AAAA,MAC7CE,WAD6C,GAC3D,KAD2D,CACnDD,IADmD;AAE3D,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACLC,WAAW,GAAGC,MAAM,CAAT,IAAA,GAAiBA,MAAM,CAD7B,KAAA,EAELC,KAAK,IAAID,MAAM,CAFV,KAAA,EAAA,KAAA;AAFT,GAAA,CAAA,CADF;AAFF,CAAA;;AAcA,IAAMA,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BE,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAEC,oBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADZ,MACYA,EADZ;AAELC,IAAAA,MAAM,EAAEC,wBAAWC;AAFd,GADwB;AAK/BT,EAAAA,IAAI,EAAE;AACJK,IAAAA,eAAe,EAAEC,oBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADb,MACaA,EADb;AAEJC,IAAAA,MAAM,EAAEC,wBAAWC;AAFf,GALyB;AAS/BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,UAAU,EAAE;AADP;AATwB,CAAlB,CAAf;;eAceC,wBAAf,OAAeA,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}