{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"./IconButton\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n      clearIcon = _ref.clearIcon,\n      icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      inputStyle = _ref.inputStyle,\n      onIconPress = _ref.onIconPress,\n      placeholder = _ref.placeholder,\n      _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n      style = _ref.style,\n      theme = _ref.theme,\n      value = _ref.value,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"style\", \"theme\", \"value\"]);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var _root$current, _root$current2, _root$current4, _root$current5;\n\n    return {\n      focus: (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus,\n      clear: (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear,\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: (_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused,\n      blur: (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur\n    };\n  });\n\n  var handleClearPress = function handleClearPress() {\n    var _root$current6, _rest$onChangeText;\n\n    (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness,\n      dark = theme.dark,\n      fonts = theme.fonts;\n  var textColor = colors.text;\n  var font = fonts.regular;\n  var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  return React.createElement(_Surface.default, {\n    style: [{\n      borderRadius: roundness,\n      elevation: 4\n    }, styles.container, style]\n  }, React.createElement(_IconButton.default, {\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    color: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n          color = _ref2.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(_reactNative.TextInput, _extends({\n    style: [styles.input, _objectSpread({\n      color: textColor\n    }, font), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: colors.placeholder,\n    selectionColor: colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityTraits: \"search\",\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), React.createElement(_IconButton.default, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n          color = _ref3.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\"\n  }));\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Searchbar);\n\nexports.default = _default;","map":{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","clearAccessibilityLabel","iconColor","searchAccessibilityLabel","rest","root","React","focus","clear","setNativeProps","args","isFocused","blur","handleClearPress","fonts","textColor","colors","font","customIconColor","dark","color","rippleColor","borderRadius","elevation","styles","icon","I18nManager","placeholder","value","clearIcon","container","flexDirection","alignItems","input","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => ({\n      // @ts-ignore\n      focus: root.current?.focus,\n      // @ts-ignore\n      clear: root.current?.clear,\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      // @ts-ignore\n      isFocused: root.current?.isFocused,\n      // @ts-ignore\n      blur: root.current?.blur,\n    }));\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"script"}