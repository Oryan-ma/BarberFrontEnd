{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fontFamilyNeedsScoping = fontFamilyNeedsScoping;\nexports.getAssetForSource = getAssetForSource;\nexports.loadSingleFontAsync = loadSingleFontAsync;\nexports.getNativeFontName = getNativeFontName;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\n\nvar _Font = require(\"./Font\");\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || _Font.FontDisplay.AUTO;\n}\n\nfunction fontFamilyNeedsScoping(name) {\n  return false;\n}\n\nfunction getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new _core.CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\n\nfunction loadSingleFontAsync(name, input) {\n  return _regenerator.default.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n\n          _context.next = 3;\n          return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(name, input));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAGA;;AACA;;AAGA,SAAS,iBAAT,CAA2B,KAA3B,EAAqC;AACnC,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAK,IAAI,IAAhB;AACD,GAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAO,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,QAAnB,IAA+B,IAAtC;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,KAA/B,EAAyC;AACvC,SAAO,KAAK,CAAC,OAAN,IAAiB,kBAAY,IAApC;AACD;;AAEK,SAAU,sBAAV,CAAiC,IAAjC,EAA6C;AACjD,SAAO,KAAP;AACD;;AAEK,SAAU,iBAAV,CAA4B,MAA5B,EAA8C;AAClD,MAAM,GAAG,GAAG,iBAAiB,CAAC,MAAD,CAA7B;AACA,MAAM,OAAO,GAAG,qBAAqB,CAAC,MAAD,CAArC;;AAEA,MAAI,CAAC,GAAD,IAAQ,OAAO,GAAP,KAAe,QAA3B,EAAqC;AACnC,IAAA,uBAAuB,CAAC,GAAD,CAAvB;AACD;;AAED,SAAO;AACL,IAAA,GAAG,EAAE,GADA;AAEL,IAAA,OAAO,EAAP;AAFK,GAAP;AAID;;AAED,SAAS,uBAAT,CAAiC,MAAjC,EAA4C;AAC1C,MAAI,IAAI,GAAW,OAAO,MAA1B;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;AACvB,QAAM,IAAI,gBAAJ,mIAE2G,IAF3G,CAAN;AAID;;AAEM,SAAe,mBAAf,CACL,IADK,EAEL,KAFK;AAAA;AAAA;AAAA;AAAA;AAIL,cAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,OAAO,KAAK,CAAC,GAAb,KAAqB,QAAlD,IAA+D,KAAa,CAAC,aAAjF,EAAgG;AAC9F,YAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD;;AANI;AAAA,4CAQC,wBAAe,SAAf,CAAyB,IAAzB,EAA+B,KAA/B,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWD,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;AAC5C,SAAO,IAAP;AACD","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { Asset } from 'expo-asset';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}