{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaybeScreen = exports.MaybeScreenContainer = exports.shouldUseActivityState = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _Screens;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar WebScreen = function (_React$Component) {\n  (0, _inherits2.default)(WebScreen, _React$Component);\n\n  var _super = _createSuper(WebScreen);\n\n  function WebScreen() {\n    (0, _classCallCheck2.default)(this, WebScreen);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"active\", \"style\"]);\n      return React.createElement(_reactNative.View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n  }]);\n  return WebScreen;\n}(React.Component);\n\nvar AnimatedWebScreen = _reactNative.Animated.createAnimatedComponent(WebScreen);\n\nvar shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexports.shouldUseActivityState = shouldUseActivityState;\n\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"enabled\"]);\n\n  var _Screens2;\n\n  if (enabled && _reactNative.Platform.OS !== 'web' && ((_Screens2 = Screens) === null || _Screens2 === void 0 ? void 0 : _Screens2.screensEnabled())) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(_reactNative.View, rest);\n};\n\nexports.MaybeScreenContainer = MaybeScreenContainer;\n\nvar MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = (0, _objectWithoutProperties2.default)(_ref2, [\"enabled\", \"active\"]);\n\n  var _Screens3;\n\n  if (enabled && _reactNative.Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && ((_Screens3 = Screens) === null || _Screens3 === void 0 ? void 0 : _Screens3.screensEnabled())) {\n    if (shouldUseActivityState) {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        activityState: active\n      }, rest));\n    } else {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        active: active\n      }, rest));\n    }\n  }\n\n  return React.createElement(_reactNative.View, rest);\n};\n\nexports.MaybeScreen = MaybeScreen;","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","render","rest","display","active","AnimatedWebScreen","Animated","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","MaybeScreen"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,OAAA;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CAIZ;;IAGA,S;;;;;;;;;;;;WAMEG,kBAAS;AAAA,wBAC4B,KAAnC,KADO;AAAA,UACD,MADC,eACD,MADC;AAAA,UACD,KADC,eACD,KADC;AAAA,UACmBC,IADnB;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AAEE,QAAA,MAAM,EAAE,CAFV,MAAA;AAGE,QAAA,KAAK,EAAE,CAAA,KAAA,EAAQ;AAAEC,UAAAA,OAAO,EAAEC,MAAM,GAAA,MAAA,GAAY;AAA7B,SAAR;AAHT,OAAA,EADF,IACE,CAAA,CADF;AAQD;;;EAjBqBJ,KAAK,CAA7B,S;;AAoBA,IAAMK,iBAAiB,GAAGC,sBAAAA,uBAAAA,CAA1B,SAA0BA,CAA1B;;AAGO,IAAMC,sBAAsB,GAAA,CAAA,QAAA,GAAA,OAAA,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGT,QAAAA,CAA/B,sBAAA;;;AAEA,IAAMU,oBAAoB,GAAG,SAAvBA,oBAAuB,OAM9B;AAAA,MAN+B,OAM/B,QAN+B,OAM/B;AAAA,MAJDN,IAIC;;AAAA,MAAA,SAAA;;AACJ,MAAIO,OAAO,IAAIC,sBAAAA,EAAAA,KAAXD,KAAAA,KAAAA,CAAAA,SAAAA,GAAAA,OAAAA,MAAAA,IAAAA,IAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAoCX,SAAAA,CAAxC,cAAwCA,EAApCW,CAAJ,EAAmE;AACjE,WAEE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAA,QAAA,CAAA;AAAyB,MAAA,OAAO,EAAEA;AAAlC,KAAA,EAAA,IAAA,CAAA,CAFF;AAID;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAP,IAAO,CAAP;AAdK,CAAA;;;;AAiBA,IAAME,WAAW,GAAG,SAAdA,WAAc,QAQrB;AAAA,MARsB,OAQtB,SARsB,OAQtB;AAAA,MARsB,MAQtB,SARsB,MAQtB;AAAA,MALDT,IAKC;;AAAA,MAAA,SAAA;;AACJ,MAAIO,OAAO,IAAIC,sBAAAA,EAAAA,KAAf,KAAA,EAAsC;AACpC,WAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AAAmB,MAAA,MAAM,EAAEN;AAA3B,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,MAAIK,OAAO,KAAA,CAAA,SAAA,GAAA,OAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAIX,SAAAA,CAAf,cAAeA,EAAJ,CAAX,EAA0C;AACxC,QAAA,sBAAA,EAA4B;AAC1B,aAEE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,QAAA,OAAO,EAAvB,OAAA;AAAkC,QAAA,aAAa,EAAEM;AAAjD,OAAA,EAAA,IAAA,CAAA,CAFF;AADF,KAAA,MAKO;AACL,aAEE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,QAAA,OAAO,EAAvB,OAAA;AAAkC,QAAA,MAAM,EAAEA;AAA1C,OAAA,EAAA,IAAA,CAAA,CAFF;AAID;AACF;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAP,IAAO,CAAP;AA3BK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"script"}